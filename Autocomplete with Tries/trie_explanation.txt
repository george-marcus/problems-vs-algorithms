Autocomplete words Analysis:

I used a trie node to form a trie which is a special kind of trees
In each trie node I used two properties:

1- a boolean value to indicate that this node has the last-char of the word that forms the tire
2- a default dictionary to prevent key errors and return a new trie node for non-existant keys
this dictionary holds a char as key and a child trie node as value. I used this dictionary
in char lookups which provides all the child nodes with their keys.

To insert a word I looped through each char in it starting from the root node.
Then for each char, I checked whether the character in the dictionary of child_nodes 
If yes, I check the child trie node with next char in the word.
If no, the char will be added to the dict as a trie node,
If the char is the last one in the word, I set the is_end_of_word property to true.

To find a sub sequence of chars, I traversed the trie based on the char sequence provided as prefix

Time complexity: O(n m) -> O(n)
    Here's a breakdown of the the three major function in an autocomplete trie
        where n denotes the number of parts in provided word
        and m denotes the number of chars in each word

    1- the insert function: it has O(n) as I looped through nodes of the trie.
    2- the find function: the same as insert, it has O(n)
    3- the suffixes function: it has O(n m) -> O(n) 
        as it depends on the number of words and the number of chars

Space complexity: O(n) where n denotes the number of chars in each word